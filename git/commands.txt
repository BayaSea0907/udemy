=== Gitメモ ===
https://www.udemy.com/unscared_git/learn/v4/content

----------------------------------------------------------------------------------------
◇ git操作

・git clone [gitのurl]		ワークツリー...自分の開発環境。


・git status
  → 変更したファイルを表示。パスも表示。[A]...追加。[M]...モデファイア(変更)。[D]...削除


・git add ファイル名/ディレクトリ名/.  (.はワークツリーの変更すべてを追加する場合)
  → 裏で行われていること...
　 　①ワークツリーからfileAの"圧縮データ"をリポジトリに保存。
     ②ステージに、"fileAの圧縮データを保存した"という"インデックス(記録)"を保存。


・git commit [-m "コミットログ"]、   [-v]...いろいろ情報を加えられる。
  → テスト環境に適用。裏で行われているものは...
　　 ①リポジトリに"ツリー1"(ブランチファイル)を作成。スナップショットがわかる
　 　②コミットファイルを、リポジトリに作成。（"ツリー1", 作成者, 日付, ログなどが記載）
　　 ※ 変更内容の要点、理由を簡潔に。あとは会社の書き方と相談。


・git commit --amend
　→ 直前のコミットをやり直す。コミットログの取り消しなどにも使う。


・git diff [--staged] ファイル名
  → git add前の変更差分を出してくれる。statusに表示されたurlを使う。
　　 --stagedは、git add後の差分を表示。


・git log [--oneline]...要点だけを1行で表示。[-p ファイル名]...指定ファイルの変更差分を表示。
	　[-n <コミット数>]...特定の数だけ履歴を表示。
  → コミットの履歴を表示する。


・git rm ファイル名、 git rm -r ディレクトリ名...ディレクトリごと削除。
      rm --cached <ファイル名>...ワークツリーには残したいが、gitの記録から削除したいときに使う。
　→ addしたファイルを削除


・git mv 旧ファイル 新ファイル
　→ファイルの移動を記録する。


・git remote add origin url(http://gitlab.in.gameon.jp/h_kobayashi/git_test.git)
  → 後々、orignと入力するだけで、このURL(リモートリポジトリ)が参照されるようになる？

----------------------------------------------------------------------------------------
◇ リセット系

・git reset HEAD [ファイル名、ディレクトリ名、.]
　→ 変更を取り消す。ステージの変更を取り消す。(最新のcommitの内容に戻す)
  ※resetを行った後、rm ファイル名を行うと、完全に無かったことになる。(git rmではない)

・git checkout -- [fileName、directoryName]
  → ファイル内容の変更を取り消す

----------------------------------------------------------------------------------------
◇ ブランチ...簡単に言うと、コミットIDを記録したポインタ(アドレス)。枝分かれする作業。

・HEAD...最新のコミットしたブランチ（作業中のブランチ）を指し示す。ファイルヘッドに近い。(masterとか)

・git branch [-a]...リモートリポジトリも表示。
  → ブランチの表示。「*」がついてる方が、今いるブランチ。

・git branch ブランチ名
  → ブランチの作成

・git checkout [-b] 既存ブランチ名
  → ブランチの切り替え。「-b」は、ブランチの新規作成と切り替えができる。
    前のブランチで編集していたファイルは、表示されなくなる。

・git branch -m [変更前ブランチ名] 新しいブランチ名...ブランチ名の変更。変更前の指定をしない場合、今いるブランチの名前を変更する。

・git branch -d,-D ブランチ名...ブランチの削除。大文字Dは強制削除。自分の今いるブランチは削除できない。checkoutすること。

----------------------------------------------------------------------------------------
◇ リモートリポジトリ

・git push origin（URL） ブランチ名、 git push origin master...add originで登録したリモートリポジトリを参照
　→ gitのリモートリポジトリ（ファイルサーバーに送る。この後マージ）
  → GitLabを開いて、マージのリクエストを作成し、マージする。

・git remote [-v]、[show]...いろいろ詳しく出してくれる
  → リモート情報の確認。

・git remote add リモート名(originとか) URL
  → リモートリポジトリ(originと同等のもの。)を追加できる。バックアップなどに使う。
　　 ※ URLは、git cloneの時に使うurlに限りなく近いものを使う。
	(https://github.com/BayaSea/udemy.git)

・git fetch [リモート名/origin]
　→ リモートリポジトリから、ローカルリポジトリに"すべてのブランチ"を取得。
     ※「git branch -a」で確認できる。赤文字で、「remotes/origin/ブランチ名」と表示される。

・git pull [リモート名/origin] hoge...リモートリポジトリから取得し、自身のブランチとマージを行う。
  → git fetchと、git mergeを組み合わせたもの。
　   ※自分の今いるブランチに、指定したブランチをマージする
　　　 必ず、マージしたいブランチに移動する。たとえ居たとしても、再度checkoutで移動する。

----------------------------------------------------------------------------------------
◇ マージ

・git merge [ブランチ名]、[リモート名(URL)、ブランチ名]、[origin/master]
  → GitLabのマージリクエストとは違う。指定のブランチを、リモートリポジトリなどの、他のブランチで更新する際に使う。

◇ コンフリクトについて...別々のブランチで、同じファイルの同じ行を変更した時「あとはよろしく」と投げられる。

・マージした際の、コンフリクトが起こって失敗したというメッセージ...
  → Auto-merging ファイルパス
     CONFLICT (content): Merge conflict in app/views/test.rb
     Automatic merge failed; fix conflicts and then commit the result. 
 
・git statusと打つと...
  → both modified: ファイル名  と赤で表示される。  

・コンフリクトの起こったファイルの編集
  →「<<<<<HEAD  本文1 ===== 本文2 >>>>> 指定したブランチ名」... HEADは、自分のいたブランチを指す。
  　 ※解決策として、本文1or本文2を 「<<<<」より上に記載し、「<<<HEAD ... >>> my_branch」までを削除する。
　→ 編集後に、addが必要な場合があるので、注意が必要。


----------------------------------------------------------------------------------------
◇ リベース
※ チームで同じプロジェクトを開発する際に使う。pmangアプリでは、よく使っている。
※ ログ(merge、commit)がきれいになる。
※ 必ず、派生元につなげたいbranchにcheckoutしてから行うこと。(masterから行うことは絶対ない！！)

・git rebase -i 派生元(masterとか、uploadとか)


----------------------------------------------------------------------------------------
◇ タグ
※ リリースするタイミングで使うとよい。
※ タグは、pushの際に指定しないとリモートリポジトリに送信されない。

→ git push origin branchName [--tags] ← これが必要

◆ タグ作成
細かいタグ:
・git tag -a tagName -m "message"  (git tag -a 20180814_01 -m "version 0.0.1"とかとか。)

軽量版タグ:
・git tag tagName (git tag 201814_01とか。あんまり意味ないからおすすめしない。)

◆ タグのデータを表示
・git show tagName ... 作成者、に千々、メッセージ、コミットなどが表示される。

----------------------------------------------------------------------------------------
◇ スタッシュ(一時避難)
※ やむを得ず今の作業を中断して、バグ対応するときなどに使える。

・git stash ... 変更したデータを、一時避難する。

・git stash list ... スタッシュの一覧を表示。

・git stash apply [スタッシュ名] ... 最新の作業(stash)を復元する。スタッシュ名が無い場合、最新のものを復元。

・git stash drop [スタッシュ名] ... スタッシュを削除できる。

----------------------------------------------------------------------------------------
◇ その他設定

□git [--global, --system] --e
  → Gitの設定が行える。初期使用時は、--globalで名前とemailアドレスを設定。]:

□git config [--global] arias.<短縮コマンド名> コマンド名
  → コマンドを短縮できるようになる。

□.gitignoreファイル...
  → gitで管理したくないファイルを記述する。
