
------------------------------------------------------
◇ 4.データ構造      

------------------------------------------------------
◆ List
array = [1, 20, 31, 5, 77]
array
#=> [1, 20, 31, 5, 77]

array[0]
#=> 1

array[-1]
#=> 77

array[:3]
#=> [1, 20, 31]

array[2:]
#=> [31, 5, 77]

array[:]
#=> [1, 20, 31, 5, 77]

array[1:3]
#=> [20, 31]

type(array)
#=> <class 'list'>
>>>

------------------------------------------------------
◆ List　別の宣言方法
list("BayaSea")
#=> ['B', 'a', 'y', 'a', 'S', 'e', 'a']

array = list("BayaSea")

array[::2]
['B', 'y', 'S', 'a']

array[::-1]
['a', 'e', 'S', 'a', 'y', 'a', 'B']

a = list("aaa")
b = list("BayaSea")

x = [a, b]
#=> [['a', 'a', 'a'], ['B', 'a', 'y', 'a', 'S', 'e', 'a']]

x[0]
#=> ['a', 'a', 'a']

x[::]
#=> [['a', 'a', 'a'], ['B', 'a', 'y', 'a', 'S', 'e', 'a']]
x[:]
#=> [['a', 'a', 'a'], ['B', 'a', 'y', 'a', 'S', 'e', 'a']]
                    
------------------------------------------------------
◆ List　応用

s = list("BayaSea")
#=> ['B', 'a', 'y', 'a', 'S', 'e', 'a']

s[2:5] = "A"
#=> ['B', 'a', 'A', 'e', 'a']  (Aが間に入った)

s.insert(0, 5)
#=> [5, 'B', 'a', 'A', 'e', 'a', 100] (0番目に5を入れる)

s.append 100
#=> SyntaxError: invalid syntax (引数は()で渡す)

s.append(100)
#=> ['B', 'a', 'A', 'e', 'a', 100]

s.pop()
#=> [5, 'B', 'a', 'A', 'e', 'a'] (ケツが消えた)

del s[1]
#=> [5, 'a', 'A', 'e', 'a'] (index 1の要素が消えた)

del s
s
#=> NameError: name 's' is not defined (配列事消えるので注意)

a = [1,2]
b = [5,6]

x = a+b
#=> [1, 2, 5, 6]

------------------------------------------------------
◆ List　データの検索

r = [1,2,3,4,5,1,3,6,1,5]

r.index(6) (6が何番目か探す)
#=> 7

r.index(9) (9が無いのでerror)
#=> ValueError: 9 is not in list

r.count(1) (1がいくつあるかカウント)
#=> 3

------------------------------------------------------
◆ List　ソート

r = [1,2,3,4,5,1,3,6,1,5]

r.sort   ( ()が無いのでerror )
#=> <built-in method sort of list object at 0x7f151e133308>

r.sort() (昇順)
#=> [1, 1, 1, 2, 3, 3, 4, 5, 5, 6]

r.sort(reverse=True)  (降順)
#=> [6, 5, 5, 4, 3, 3, 2, 1, 1, 1]

r.reverse() (要素の順番をひっくり返す)
#=> [1, 1, 1, 2, 3, 3, 4, 5, 5, 6]


str = "My name is BayaSea."

to_split = str.split(" ")
to_split
#=> ['My', 'name', 'is', 'BayaSea.']

x = " ".join(to_split)
x
#=> 'My name is BayaSea.'

y = "".join(to_split)
y
#=> 'MynameisBayaSea.'


------------------------------------------------------
◆ List　コピーする際の注意

i = [1,2,3] 
j = i 
#=> [1,2,3]

j[0] = 100
i[0]
#=> 100 (C言語のポインタと同じ)

id(i) #=> 139728674751240  (id(変数)で、addressが見れる)
id(j) #=> 139728674751240

x = [1, 3, 5]
y = x.copy()
#=> [1, 3, 5]

y[0] = 100
x[0]
#=> 1 (copy()を使えば、addressは別)

id(x) #=> 139728683209928
id(y) #=> 139728683233736
-------------------------------------------------
◆ タプル (定数てきな)

タプル(定数の概念に近い。)
t = (1, 2, 3, 5, 16)
t = 1, 2, 3, 5, 16 ... 同じ

t[0] = 5 とかはできない。
読み込み専用の配列みたいな。

x, y = 10, 20 
print(x, y) 

#=> 10 20
※ 10, 20は、pythonの仕様上、タプルという扱いをされている。


-------------------------------------------------
◆ Dictionary (辞書。key, valueで構成)

d = {"x": 10, "y": 20}
d["x"]
#=> 10

d.keys()
#=> ["x", "y"]

d.values()
#=> [10, 20]

"x" in d
#=> True  
※ dに「x」が含まれていればTrue


-------------------------------------------------
◆ 集合　(bit演算みたいなことができます。)
a = {1, 2, 3, 4, 5, 6}
b = {2, 4, 5}

a - b
#=> {1, 3, 4, 6}

a & b
#=> {2, 4, 5}

a | b 
#=> {1, 2, 3, 4, 5, 6}
