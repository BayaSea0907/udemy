-------------------------------------------------
◇ 5. 制御フローと、コード構造

-------------------------------------------------
◇ コメント

# Rubyと一緒の書き方。

-------------------------------------------------
◇ 1行が長くなる時 

※ バックスラッシュ(\)を末尾につける。

a == b && \
b != c

みたいな。

-------------------------------------------------
◇ bool型について

Rubyの「true」 →「True」
Rubyの「false」→「False」
Rubyの「nil」  →「None」(多分)

-------------------------------------------------
◇ 論理演算子

&&がない。「and」を使う。
||がない。「or」を使う。

-------------------------------------------------
◇ 条件式

if x < 0:    (「:」← が入る)
	# success処理
elif x == 0
	# インデントずらす。
else:
	# ※ endがいらない。
  
「is」 ... Noneかどうかの時に使う。
 (a is None)

-------------------------------------------------
◇ 入力処理

num, = input("Enter: ")
#=> Enter: ... (入力待ち状態になる。numに入力値が代入される。)

-------------------------------------------------
◇ ループ処理

「break」   ... その場でループを抜ける。
「continue」... その場で処理をやめ、次のループに進む。

some_list = [7,5,1]
i = 0
while i < len(some_list):   (whileを使ったループ処理)
	print(some_list[i])
	i += 
	
#=> 7
#=> 5
#=> 1
	
for i in some_list:	(forを使ったループ処理)
	print(i)
	
#=> 7
#=> 5
#=> 1

-------------------------------------------------
◇ zip関数
※ 要素に名前を付ける事が出来る

for day, drink in zip(days, drinks)
	print(day, drink) // 要素がday, drinkに入る
	
-------------------------------------------------
◇ 関数定義

# 定義 defを使う 「():」に注意
def some_method():
	return 'hello' # return 必須
		    # end 不要
# 呼び出し 「;」不要
result = some_method()
#=> 'hello'

# 引数有定義
def some_method1(a, b):
def some_method2(a: int, b: int):
def some_method3(a=10, b=100):

# 引数有呼び出し
result = some_method1(10, 100)	
result = some_method2(b=100, a=10)
result = some_method3()

	
-------------------------------------------------
◇ 関数内関数

def some_method():
	def hoge():
		return 'a'
	return hoge()

result = some_method()
#=> 'a'

-------------------------------------------------
◇ クロージャー

def outher():
	def inner():
		return "hello"
	return innner	# innnerの関数ポインタを返す。
	
f = outher
f()
#=> 'hello'

-------------------------------------------------
◇ デコレーター
※ デバッグに便利

# 定義
def print_info(func):
	def wrapper(*args, **kwargs)
		print('func:', func.__name__)
		print('args:', args)
		print('kwargs:', kwargs)
		
		result = func(*args, **kwargs)
		print('result:', result)
		return result
	return wrapper

# 「@」はデコレーターを使います宣言。先に@print_infoが呼び出される。
#  いろんなメソッドに、「@print_info」を付ける事で、デバッグが楽になる！
@print_info
def add_num(a,b):
	return a+b
	
add_num(5, 10)
#=> func: wrapper
#=> args: (5, 10)
#=> result 15
#=> 15

-------------------------------------------------
◇ ラムダ

list = ['One', 'two', 'Three']  # twoだけ小文字

def change_words(words, func):
	for word in words:
		print(func(word))
		
# lamdaを使って、関数定義を短縮。内部で実行したい関数を渡している。
change_words(list, lambda word: word.capitalize())
#=> 'One', 'Two', 'Three'
change_words(list, lambda word: word.lower())
#=> 'one', 'two', 'three'

-------------------------------------------------
◇ ジェネレーター (yield)
※ ループの任意の場所で抜けられる。

for i in l
	print(i)

def greeting():
	yield print('hello')
	yield print('world')
	yield print('!!')

func = greeting()
next(func) #=> 'hello'
next(func) #=> 'world'
next(func) #=> '!!'
next(func) #=> yieldが無いのでエラーになります。

-------------------------------------------------
◇ 名前空間

animal = 'cat'

def func():
	print(animal)  # 自動変数宣言前に呼び出すと、エラーになる。
	animal = 'dog'
	print(animal)
	# print(locals()) # ローカル変数の配列が返ってくる。
f()
#=> 'dog'

# funcの中で自動変数「animal」が出来たが、
# その後消えた。
print(animal)
#=> 'cat'

-------------------------------------------------
◇ 例外処理
※ 「try: ～ except:」を使う 

list = [1,2,3]
i = 5

# 例外を発生させる処理
try:
	list[i]	
	
# 例外処理
except ErrorClass as error:   # as(として)
	print('error message: ', error)
except Exception as error:
	# エラーリスト https://docs.python.jp/3/library/exceptions.html
	print('大体のエラーをキャッチします。でもエラーは明確にした方がよい。')
	
-------------------------------------------------
◇ 独自例外
※ version管理の際に、importエラー時に別のファイルをimportすると言った使い道がある。

# IndexErrorとして例外を強制的に発生させる
raise IndexError('test error') 

# 例外クラスを作る
class UppercaseError(Exception): # Exceptionを受けたときに、UppercaseErrorを発生させる。
	pass

def check()
	temp = ['takeshi', 'BAYASEA']
	if temp.isUpper():
		raise UppercaseError(temp)
	
try:
	check()
	#=> UppercaseError: BAYASEA
except UppercaseError as error:
	print(error)
	#=> UppercaseError: BAYASEA
	pass
