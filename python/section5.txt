-------------------------------------------------
◇ 5. 制御フローと、コード構造

-------------------------------------------------
◇ コメント

# Rubyと一緒の書き方。

-------------------------------------------------
◇ 1行が長くなる時 

※ バックスラッシュ(\)を末尾につける。

a == b && \
b != c

みたいな。

-------------------------------------------------
◇ bool型について

Rubyの「true」 →「True」
Rubyの「false」→「False」
Rubyの「nil」  →「None」(多分)

-------------------------------------------------
◇ 論理演算子

&&がない。「and」を使う。
||がない。「or」を使う。

-------------------------------------------------
◇ 条件式

if x < 0:    (「:」← が入る)
	# success処理
elsif: x == 0
	# インデントずらす。
else:
	# ※ endがいらない。
  
「is」 ... Noneかどうかの時に使う。
 (a is None)

-------------------------------------------------
◇ 入力処理

num, = input("Enter: ")
#=> Enter: ... (入力待ち状態になる。numに入力値が代入される。)

-------------------------------------------------
◇ ループ処理

「break」   ... その場でループを抜ける。
「continue」... その場で処理をやめ、次のループに進む。

some_list = [7,5,1]
i = 0
while i < len(some_list):   (whileを使ったループ処理)
	print(some_list[i])
	i += 
	
#=> 7
#=> 5
#=> 1
	
for i in some_list:	(forを使ったループ処理)
	print(i)
	
#=> 7
#=> 5
#=> 1

-------------------------------------------------
◇ 次回 5-43 range関数から

・zip ... 

for day, drink in zip(days, drinks)
	print(day, drink) // 要素がday, drinkに入る

